# -*- coding: utf-8 -*-
"""Disease_prediction_App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R_SjYt1sGJcN_FLoXkpRA6qoCTClePyM
"""

import pandas as pd
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, f1_score, r2_score
from sklearn.inspection import permutation_importance
import matplotlib.pyplot as plt
import joblib
import json

df1 = pd.read_csv("Training.csv")
df1 = df1.drop('Unnamed: 133', axis=1)
x_training = df1.drop("prognosis", axis=1)
y_training = df1["prognosis"]
df2 = pd.read_csv("Testing.csv")
y_testing = df2["prognosis"]
x_testing = df2.drop("prognosis", axis=1)
df1

neigh = KNeighborsClassifier(n_neighbors=10)
neigh.fit(x_training, y_training)

y_pred = neigh.predict(x_testing)
print(classification_report(y_testing, y_pred))

f1 = f1_score(y_testing, y_pred, average='weighted')
print(f"Weighted F1 Score: {f1:.4f}")

f1_scores = []
features = []
x = x_training.copy()
y = y_training.copy()

while x.shape[1] > 0:
    print(f"Number of features: {x.shape[1]}")

    neigh = KNeighborsClassifier(n_neighbors=10)
    neigh.fit(x, y)

    feature_importance = np.zeros(x.shape[1])
    base_score = neigh.score(x_testing[x.columns], y_testing)

    if x.shape[1] > 1:
        for i in range(x.shape[1]):
            X_reduced = x.drop(columns=[x.columns[i]])
            X_test_reduced = x_testing[X_reduced.columns]

            temp_neigh = KNeighborsClassifier(n_neighbors=10)
            temp_neigh.fit(X_reduced, y)
            new_score = temp_neigh.score(X_test_reduced, y_testing)
            feature_importance[i] = base_score - new_score

    x_test_current = x_testing[x.columns]
    y_pred = neigh.predict(x_test_current)

    f1 = f1_score(y_testing, y_pred, average='weighted')
    f1_scores.append(f1)
    features.append(x.columns.tolist())

    if x.shape[1] == 1:
        break
    least_important_feature_index = np.argmin(feature_importance)
    least_important_feature = x.columns[least_important_feature_index]
    x = x.drop(columns=[least_important_feature])

    print(f"Removed feature: {least_important_feature}, F1 score: {f1:.4f}")

features_to_remove = [
    'skin_rash', 'itching', 'nodal_skin_eruptions', 'continuous_sneezing', 'shivering',
    'chills', 'acidity', 'ulcers_on_tongue', 'weight_gain', 'anxiety',
    'cold_hands_and_feets', 'mood_swings', 'weight_loss', 'restlessness', 'lethargy',
    'irregular_sugar_level', 'indigestion', 'dark_urine', 'pain_behind_the_eyes', 'back_pain',
    'constipation', 'abdominal_pain', 'fatigue', 'sweating', 'vomiting',
    'burning_micturition', 'stomach_pain', 'sunken_eyes', 'muscle_wasting', 'high_fever',
    'patches_in_throat', 'yellow_urine', 'acute_liver_failure', 'fluid_overload', 'swelling_of_stomach',
    'blurred_and_distorted_vision', 'phlegm', 'throat_irritation', 'redness_of_eyes', 'sinus_pressure',
    'runny_nose', 'congestion', 'fast_heart_rate', 'pain_during_bowel_movements', 'mild_fever',
    'malaise', 'yellowing_of_eyes', 'headache', 'dehydration', 'cramps',
    'bruising', 'puffy_face_and_eyes', 'enlarged_thyroid', 'brittle_nails', 'swollen_extremeties',
    'drying_and_tingling_lips', 'slurred_speech', 'cough'
]

X_filtered_train = x_training.drop(columns=features_to_remove)
X_filtered_test = x_testing.drop(columns=features_to_remove)

neigh = KNeighborsClassifier(n_neighbors=10)
neigh.fit(X_filtered_train, y_training)

y_pred = neigh.predict(X_filtered_test)
print(classification_report(y_testing, y_pred))
f1 = f1_score(y_testing, y_pred, average='weighted')
print(f"Weighted F1 Score: {f1:.4f}")

f1_scores = []
features = []
x = X_filtered_train.copy()
y = y_training.copy()

while x.shape[1] > 0:
    print(f"Number of features: {x.shape[1]}")

    neigh = KNeighborsClassifier(n_neighbors=10)
    neigh.fit(x, y)

    feature_importance = np.zeros(x.shape[1])
    base_score = neigh.score(x_testing[x.columns], y_testing)

    if x.shape[1] > 1:
        for i in range(x.shape[1]):
            X_reduced = x.drop(columns=[x.columns[i]])
            X_test_reduced = x_testing[X_reduced.columns]

            temp_neigh = KNeighborsClassifier(n_neighbors=10)
            temp_neigh.fit(X_reduced, y)
            new_score = temp_neigh.score(X_test_reduced, y_testing)
            feature_importance[i] = base_score - new_score

    x_test_current = x_testing[x.columns]
    y_pred = neigh.predict(x_test_current)

    f1 = f1_score(y_testing, y_pred, average='weighted')
    f1_scores.append(f1)
    features.append(x.columns.tolist())

    if x.shape[1] == 1:
        break
    least_important_feature_index = np.argmin(feature_importance)
    least_important_feature = x.columns[least_important_feature_index]
    x = x.drop(columns=[least_important_feature])

    print(f"Removed feature: {least_important_feature}, F1 score: {f1:.4f}")

neigh = KNeighborsClassifier(n_neighbors=10)
neigh.fit(X_filtered_train, y_training)
joblib.dump(neigh, 'model_filtered.pkl')

model = joblib.load("model_filtered.pkl")
features = model.feature_names_in_.tolist()

with open("features.json", "w") as f:
    json.dump(features, f)
